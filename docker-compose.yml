services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-init
    depends_on:
      - kafka
    user: root
    command: >
      bash -c '
        while ! cub kafka-ready -b kafka:29092 1 10; do
          sleep 5
        done

        kafka-topics --create --if-not-exists --topic brapi_stock_quotes --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1 &&
        kafka-topics --create --if-not-exists --topic postgres_stock_quotes --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1

        echo "Tópicos criados com sucesso."
      '


  postgres: 
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: "airflow"
      POSTGRES_USER: "airflow"
      POSTGRES_PASSWORD: "airflow"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init-db:/docker-entrypoint-initdb.d


  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        echo 'Esperando o MinIO estar pronto para comandos mc...' &&
        /usr/bin/mc alias set minio_local http://minio:9000 minioadmin minioadmin &&
        until /usr/bin/mc ls minio_local/; do
          echo 'MinIO ainda não está disponível para comandos mc (provavelmente ainda inicializando ou problemas de acesso), esperando...'
          sleep 5
        done &&
        echo 'MinIO está acessível. Criando buckets...' &&
        /usr/bin/mc mb -p minio_local/raw &&
        /usr/bin/mc mb -p minio_local/processing &&
        /usr/bin/mc mb -p minio_local/loaded &&
        echo 'Buckets do MinIO criados com sucesso.' &&
        exit 0
      "

  kafka_to_minio_raw:
    build:
      context: ./ingestion_services/kafka_to_minio_raw
      dockerfile: Dockerfile
    container_name: kafka_to_minio_raw
    depends_on:
      - kafka-init
      - minio-init
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      MINIO_RAW_BUCKET: "raw"

  postgres_producer:
    build:
      context: .
      dockerfile: ./ingestion_services/postgres_producer/Dockerfile
    container_name: postgres_producer
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      YFINANCE_TOPIC: "postgres_stock_quotes"
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "stock_data"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_init
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=6b0aad36669d7723dfc0c0f587b07c1e
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --role Admin --username admin --password admin --firstname Admin --lastname User --email admin@example.com'

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_webserver
    depends_on:
      - airflow-init
    command: webserver
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
      - ./ingestion_services/batch_ingestion/COTAHIST_A2009_to_A2020_P.csv:/opt/airflow/ingestion_data/COTAHIST_A2009_to_A2020_P.csv
      - ./output:/opt/airflow/output 
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - BRAPI_TOKEN=${BRAPI_TOKEN}
      - AIRFLOW__WEBSERVER__SECRET_KEY=6b0aad36669d7723dfc0c0f587b07c1e
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow_scheduler
    depends_on:
      - airflow-webserver
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
      - ./ingestion_services/batch_ingestion/COTAHIST_A2009_to_A2020_P.csv:/opt/airflow/ingestion_data/COTAHIST_A2009_to_A2020_P.csv
      - ./output:/opt/airflow/output 
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - BRAPI_TOKEN=${BRAPI_TOKEN}
      - AIRFLOW__WEBSERVER__SECRET_KEY=6b0aad36669d7723dfc0c0f587b07c1e

  analytics_service:
    build:
      context: .
      dockerfile: ./analytics_service/Dockerfile
    container_name: analytics_service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8501:8501"
    volumes:
      - ./analytics_service:/app
    environment:
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "b3_dw" 
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"

volumes:
  postgres_data:
  minio_data:

